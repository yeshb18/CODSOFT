import math

class TicTacToe:
    def __init__(self):
        self.board = [' ' for _ in range(9)]
        self.current_winner = None

    def print_board(self):
        for row in [self.board[i*3:(i+1)*3] for i in range(3)]:
            print('| ' + ' | '.join(row) + ' |')

    @staticmethod
    def print_board_nums():
        number_board = [[str(i) for i in range(j*3, (j+1)*3)] for j in range(3)]
        for row in number_board:
            print('| ' + ' | '.join(row) + ' |')

    def available_moves(self):
        return [i for i, spot in enumerate(self.board) if spot == ' ']

    def empty_squares(self):
        return ' ' in self.board

    def num_empty_squares(self):
        return self.board.count(' ')

    def make_move(self, square, letter):
        if self.board[square] == ' ':
            self.board[square] = letter
            if self.winner(square, letter):
                self.current_winner = letter
            return True
        return False

    def winner(self, square, letter):
     
        row_ind = square // 3
        row = self.board[row_ind*3:(row_ind+1)*3]
        if all([spot == letter for spot in row]):
            return True
    
        col_ind = square % 3
        column = [self.board[col_ind+i*3] for i in range(3)]
        if all([spot == letter for spot in column]):
            return True
     
        if square % 2 == 0:
            diagonal1 = [self.board[i] for i in [0, 4, 8]]
            if all([spot == letter for spot in diagonal1]):
                return True
            diagonal2 = [self.board[i] for i in [2, 4, 6]]
            if all([spot == letter for spot in diagonal2]):
                return True
        return False

def minimax(board, depth, alpha, beta, maximizing_player, ai_letter, human_letter):
    if board.current_winner == ai_letter:
        return None, 10
    elif board.current_winner == human_letter:
        return None, -10
    elif not board.empty_squares():
        return None, 0

    if maximizing_player:
        max_eval = -math.inf
        best_move = None
        for move in board.available_moves():
            board.make_move(move, ai_letter)
            _, eval = minimax(board, depth+1, alpha, beta, False, ai_letter, human_letter)
            board.board[move] = ' '
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
            if eval == max_eval:
                best_move = move
        return best_move, max_eval
    else:
        min_eval = math.inf
        best_move = None
        for move in board.available_moves():
            board.make_move(move, human_letter)
            _, eval = minimax(board, depth+1, alpha, beta, True, ai_letter, human_letter)
            board.board[move] = ' '
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
            if eval == min_eval:
                best_move = move
        return best_move, min_eval

def play_game():
    t = TicTacToe()
    human_letter = 'X'
    ai_letter = 'O'
    current_player = human_letter
    print("Human player: X, AI player: O")
    t.print_board_nums()
    print("")

    while t.empty_squares():
        if current_player == human_letter:
            move = None
            while move not in range(9):
                try:
                    move = int(input("Enter your move (0-8): "))
                except ValueError:
                    print("Invalid input. Please enter a number between 0 and 8.")
            if t.make_move(move, human_letter):
                t.print_board()
                if t.current_winner:
                    print("You win!")
                    return
                current_player = ai_letter
        else:
            move, _ = minimax(t, 0, -math.inf, math.inf, True, ai_letter, human_letter)
            t.make_move(move, ai_letter)
            print(f"AI player placed O at position {move}")
            t.print_board()
            if t.current_winner:
                print("AI wins!")
                return
            current_player = human_letter

    print("It's a tie!")

if __name__ == "__main__":
    play_game()
